name: Build for main
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache nextjs build
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-

      - name: print nextjs cache directory
        continue-on-error: true
        if: "!contains(github.event.head_commit.message, '[deploy only]')"
        run: ls -la ${{ github.workspace }}/.next/cache

      - name: generate commit message file
        run: echo $(git log -1 --no-merges --pretty=%B) > commit_message.txt

      - name: Check if the content has changed
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            public:
              - 'public/**'

      - name: Upload landing image to S3
        if: steps.changes.outputs.public == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 sync \
            --region ap-northeast-2 \
            public/images s3://my-blog-phil/images
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Create cloud-front invalidation
        if: steps.changes.outputs.public == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws cloudfront create-invalidation --distribution-id E1HCDR1HNK8NRR --paths "/images/*"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Remove File
        run: find public -type f \( -name "*.png" -o -name "*.webp" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.svg" \) -exec rm -f -v {} \;

      # - name: Generate .env.production.local file from gha secrets
      #   env:
      #     SLACK_BOT_TOKEN: ${{secrets.SLACK_BOT_TOKEN}}
      #   run: |
      #     touch .env.production.local
      #     echo SLACK_BOT_TOKEN="$SLACK_BOT_TOKEN" >> .env.production.local

      #     echo "cat .env.production.local"
      #     cat .env.production.local
      #     echo "ls -al ."
      #     ls -al .
      #     echo "ls -al ${{ github.workspace }}"
      #     ls -al ${{ github.workspace }}
      #   shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build docker image and push to ECR
        uses: docker/build-push-action@v4
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain
        with:
          context: .
          file: Dockerfile
          push: true
          tags: 686164345236.dkr.ecr.ap-northeast-2.amazonaws.com/my_blog
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Docker Hub에 새로운 Image가 push 완료되면 CodeDeploy Agent가 동작되도록 합니다.
      # --application-name과 --deployment-group-name은 아까 작성하신 애플리케이션 이름과 그룹 이름으로 대체하시면 됩니다.
      # [Your GitHub Repository] 예시) Woomin-Jeon/facebook-clone-server
      # "commitId=${GITHUB_SHA}" 코드가 자동으로 최신 commit을 불러옵니다.
      # 아까 보관해두었던 AWS_ACCESS_KEY_ID와 AWS_SECRET_ACCESS_KEY는 GitHub secrets에 저장해둡니다.
      - name: Trigger the CodeDeploy in EC2 instance
        run: aws deploy --region ap-northeast-2 create-deployment --application-name my_blog_codedeploy --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name my_blog --github-location repository=cpk0709/mypage-nextjs,commitId=${GITHUB_SHA}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          Default_region_name: ap-northeast-2

      - name: Exporting nextjs build cache
        if: ${{ !contains(github.event.head_commit.message, '[deploy only]') }}
        uses: docker/build-push-action@v4
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain
        with:
          context: .
          file: Dockerfile
          target: nextjs-cache
          outputs: type=local,dest=.
          push: false
          tags: 686164345236.dkr.ecr.ap-northeast-2.amazonaws.com/my_blog
          cache-from: type=gha

      - name: print nextjs cache directory after build
        continue-on-error: true
        run: ls -la ${{ github.workspace }}/.next/cache
